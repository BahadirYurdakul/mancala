import {Express, NextFunction, Request, Response} from "express";
import {logger} from "../utils/logging";
import {errorToApplicationError} from "./errorConverters";

/**
 * Add exception handler to application as middleware.
 * This function should be called at last after adding all routes.
 * @param app
 * Note:
 * For handling errors that are thrown during asynchronous code execution in Express (versions < 5.x),
 * you need to manually catch and invoke the in-built error handler (or your custom one) using the next() function.
 * This function cannot catch errors thrown during asynchronous code execution, so don't throw them. Call next(err).
 */
export function handleErrors(app: Express) {
    app.use(generalErrorHandler);
}

/**
 * This function converts errors to custom model and return it with status code generated by error type.
 * Note:
 * Do not remove next parameter because then it won't be worked as expected and
 * express will call function with wrong types.
 */
function generalErrorHandler(err: Error, req: Request, res: Response, next: NextFunction) {
    const applicationError = errorToApplicationError(err);
    logger.error(`Generic error occurred. Error: ${err}, Application Error: ${applicationError}`);
    return res.status(applicationError.statusCode).json(applicationError.toResponse());
}